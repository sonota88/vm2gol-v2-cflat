// -*- mode: c -*-

import lib.common_import;
import lib.utils;

#define INPUT_SIZE 8192

int is_space_char(char ch) {
  return (
       char_eq(ch, ' ')
    || char_eq(ch, '\n')
  );
}

int match_space(char* rest) {
  int i;
  for (i = 0; i < strlen(rest); i++) {
    if (is_space_char(rest[i])) {
      ;
    } else {
      break;
    }
  }
  return i;
}

int match_comment(char* rest) {
  if (strncmp(rest, "//", 2) != 0) {
    return 0;
  }

  return find_index(rest, '\n', 2);
}

int match_str(char* rest) {
  if (! char_eq(rest[0], '"')) {
    return 0;
  }

  return find_index(rest, '"', 1) - 1;
}

int is_kw_char(char ch) {
  return (
       ('a' <= ch && ch <= 'z')
    || ch == '_'
  );
}

int match_kw(char* rest) {
  int size;

  size = 8;
  if (
       strncmp(rest, "call_set", size) == 0
    && !(is_kw_char(rest[size]))
  ) {
    return size;
  }

  size = 6;
  if (
       strncmp(rest, "return", size) == 0
    && !(is_kw_char(rest[size]))
  ) {
    return size;
  }

  size = 5;
  if (
       strncmp(rest, "while", size) == 0
    && !(is_kw_char(rest[size]))
  ) {
    return size;
  }

  size = 4;
  if (
       (
            strncmp(rest, "func", size) == 0
         || strncmp(rest, "call", size) == 0
         || strncmp(rest, "case", size) == 0
         || strncmp(rest, "_cmt", size) == 0
       )
    && !(is_kw_char(rest[size]))
  ) {
    return size;
  }

  size = 3;
  if (
       (
            strncmp(rest, "var", size) == 0
         || strncmp(rest, "set", size) == 0
       )
    && !(is_kw_char(rest[size]))
  ) {
    return size;
  }

  return 0;
}

int match_int(char* rest) {
  if (
       char_eq(rest[0], '-')
    || is_numeric(rest[0])
  ) {
    // matched
  } else {
    return 0;
  }

  return find_non_numeric_index(rest);
}

int match_symbol(char* str) {
  if (
       strncmp(str, "==", 2) == 0
    || strncmp(str, "!=", 2) == 0
  ) {
    return 2;
  } else if (match_any_char(";(){},+*=", str[0])) {
    return 1;
  } else {
    return 0;
  };
}

int is_ident_char(char ch) {
  return (
       ('a' <= ch && ch <= 'z')
    || ('0' <= ch && ch <= '9')
    || match_any_char("_", ch)
  );
}

int match_ident(char* rest) {
  int i;
  for (i = 1; i < strlen(rest); i++) {
    if (is_ident_char(rest[i])) {
      ;
    } else {
      break;
    }
  }
  return i;
}

int main(void) {
  char[INPUT_SIZE] input;
  int pos = 0;
  int src_len;
  char[INPUT_SIZE] rest;
  char[256] temp;
  int size;

  read_stdin_all(input);

  src_len = strlen(input);

  while (pos < src_len) {
    substring(rest, input, pos, INPUT_SIZE);

    size = match_space(rest);
    if (0 < size) {
      pos += size;
      continue;
    }

    size = match_comment(rest);
    if (0 < size) {
      pos += size;
      continue;
    }

    size = match_str(rest);
    if (0 < size) {
      substring(temp, rest, 1, size + 1);
      printf("str:%s\n", temp);
      pos += size + 2;
      continue;
    }

    size = match_kw(rest);
    if (0 < size) {
      substring(temp, rest, 0, size);
      printf("kw:%s\n", temp);
      pos += size;
      continue;
    }

    size = match_int(rest);
    if (0 < size) {
      substring(temp, rest, 0, size);
      printf("int:%s\n", temp);
      pos += size;
      continue;
    }

    size = match_symbol(rest);
    if (0 < size) {
      substring(temp, rest, 0, size);
      printf("sym:%s\n", temp);
      pos += size;
      continue;
    }

    size = match_ident(rest);
    if (0 < size) {
      substring(temp, rest, 0, size);
      printf("ident:%s\n", temp);
      pos += size;
      continue;
    }

    fprintf(stderr, "Unexpected pattern (%s)\n", rest);
    exit(1);
  }

  return 0;
}
