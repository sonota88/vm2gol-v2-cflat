// -*- mode: c -*-

void puts_e(char* str){
  fprintf(stderr, "%s", str);
  fprintf(stderr, "\n");
}

void read_stdin_all(char* dest) {
  int ch;
  int i = -1;

  while (1) {
    i++;
    ch = getchar();
    if (ch == EOF) {
      break;
    }

    dest[i] = (char)ch;
  }
  dest[i + 1] = '\0';
}

int find_index(char* str, char ch, int from) {
  int i = from;
  while (1) {
    if (char_eq(str[i], '\0')) {
      return -1;
    }
    if (char_eq(str[i], ch)) {
      break;
    }
    i++;
  }
  return i;
}

int is_numeric(char ch) {
  if ('0' <= (int)ch && (int)ch <= '9') {
    return 1;
  } else {
    return 0;
  }
}

int find_non_numeric_index(char* str) {
  int i;
  for (i = 1; i < strlen(str); i++) {
    if (is_numeric(str[i])) {
      ;
    } else {
      break;
    }
  }
  return i;
}

void substring(char* dest, char* src, int index_start, int index_end) {
  int i;
  int size = index_end - index_start;
  for (i = 0; i < size; i++) {
    if (char_eq(src[index_start + i], '\0')) {
      size = i;
      break;
    }
    dest[i] = src[index_start + i];
  }
  dest[size] = '\0';
}

int pow10(int exponent) {
  int n = 1;
  int i;

  for (i = 0; i < exponent; i++) {
    n *= 10;
  }

  return n;
}

int s_to_i_positive(char* str) {
  int num_digits;
  int i;
  int str_i;
  int digit_n;
  int n = 0;

  num_digits = strlen(str);

  for (i = 0; i < num_digits; i++) {
    str_i = num_digits - i - 1;
    digit_n = (int)(str[str_i]) - (int)'0';
    n += digit_n * pow10(i);
  }

  return n;
}

int s_to_i(char* str) {
  int num_digits = strlen(str);
  int negative_factor = 1;
  int i;
  char[8] str_abs;

  if ((int)(str[0]) == (int)'-') {
    negative_factor = -1;
    num_digits--;
    for (i = 0; i <= num_digits; i++) {
      str_abs[i] = str[i + 1];
    }
  } else {
    strcpy(str_abs, str);
  }

  return s_to_i_positive(str_abs) * negative_factor;
}

int str_eq(char* s1, char* s2) {
  return strcmp(s1, s2) == 0;
}

int char_eq(char c1, char c2) {
  return (int)c1 == (int)c2;
}

int match_any_char(char *chars, char ch) {
  if (0 <= find_index(chars, ch, 0)) {
    return 1;
  } else {
    return 0;
  }
}

void _err_exit(char* msg, char* filename, int lineno) {
  fprintf(stderr, "ERROR %s: %d: ", filename, lineno);
  fprintf(stderr, "%s\n", msg);
  exit(1);
}

void must_not_happen(char* msg, char* filename, int lineno) {
  _err_exit(msg, filename, lineno);
}
