// -*- mode: c -*-

import lib.common_import;
import lib.utils;
import lib.types;
import lib.json;

// (* 1024 20) => 20480
#define INPUT_SIZE 20480

static int g_label_id = 0;
static int g_is_debug = 0;

// --------------------------------

static void not_yet_impl(char* msg, int ln) {
  _err_exit(msg, __FILE__, ln);
}

static void codegen_error(char* msg, int ln) {
  _err_exit(msg, __FILE__, ln);
}

static void puts_fn(char* str) {
  if (g_is_debug) {
    puts_e(str);
  }
}

// --------------------------------

int get_label_id(void) {
  g_label_id++;
  return g_label_id;
}

void asm_prologue(void) {
  printf("  push bp\n");
  printf("  cp sp bp\n");
}

void asm_epilogue(void) {
  printf("  cp bp sp\n");
  printf("  pop bp\n");
}

int to_fn_arg_disp(Names* names, char* name) {
  int i = Names_index(names, name);
  if (i < 0) {
    codegen_error("to_fn_arg_disp", __LINE__);
  }
  return i + 2;
}

int to_lvar_disp(Names* names, char* name) {
  int i = Names_index(names, name);
  if (i < 0) {
    codegen_error("to_lvar_disp", __LINE__);
  }
  return -(i + 1);
}

// --------------------------------

void gen_expr_add(void) {
  printf("  pop reg_b\n");
  printf("  pop reg_a\n");
  printf("  add_ab\n");
}

void gen_expr_mult(void) {
  printf("  pop reg_b\n");
  printf("  pop reg_a\n");
  printf("  mult_ab\n");
}

void gen_expr_eq(void) {
  int label_id;
  char[16] then_label;
  char[16] end_label;

  label_id = get_label_id();

  sprintf(then_label, "then_%d", label_id);
  sprintf(end_label, "end_eq_%d", label_id);

  printf("  pop reg_b\n");
  printf("  pop reg_a\n");

  printf("  compare\n");
  printf("  jump_eq %s\n", then_label);

  printf("  cp 0 reg_a\n");
  printf("  jump %s\n", end_label);

  printf("label %s\n", then_label);
  printf("  cp 1 reg_a\n");
  printf("label %s\n", end_label);
}

void gen_expr_neq(void) {
  int label_id;
  char[16] then_label;
  char[16] end_label;

  label_id = get_label_id();

  sprintf(then_label, "then_%d", label_id);
  sprintf(end_label, "end_neq_%d", label_id);

  printf("  pop reg_b\n");
  printf("  pop reg_a\n");

  printf("  compare\n");
  printf("  jump_eq %s\n", then_label);

  printf("  cp 1 reg_a\n");
  printf("  jump %s\n", end_label);

  printf("label %s\n", then_label);
  printf("  cp 0 reg_a\n");
  printf("label %s\n", end_label);
}

void _gen_expr_binary(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeItem* expr
) {
  NodeItem* operator;
  NodeList* args;
  NodeItem* term_l;
  NodeItem* term_r;

  puts_fn("-->> _gen_expr_binary");

  operator = NodeList_head(expr->list);
  args     = NodeList_rest(expr->list);

  term_l = NodeList_get(args, 0);
  term_r = NodeList_get(args, 1);

  gen_expr(fn_arg_names, lvar_names, term_l);
  printf("  push reg_a\n");
  gen_expr(fn_arg_names, lvar_names, term_r);
  printf("  push reg_a\n");

  if (NodeItem_str_eq(operator, "+")) {
    gen_expr_add();
  } else if (NodeItem_str_eq(operator, "*")) {
    gen_expr_mult();
  } else if (NodeItem_str_eq(operator, "==")) {
    gen_expr_eq();
  } else if (NodeItem_str_eq(operator, "!=")) {
    gen_expr_neq();
  } else {
    not_yet_impl("_gen_expr_binary", __LINE__);
  }
}

void gen_expr(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeItem* expr
) {
  int disp;

  if (expr->kind == NODE_INT) {
    printf("  cp %d reg_a\n", expr->int_val);
  } else if (expr->kind == NODE_STR) {
    if (Names_contains(fn_arg_names, expr->str_val)) {
      disp = to_fn_arg_disp(fn_arg_names, expr->str_val);
      printf("  cp [bp:%d] reg_a\n", disp);
    } else if (Names_contains(lvar_names, expr->str_val)) {
      disp = to_lvar_disp(lvar_names, expr->str_val);
      printf("  cp [bp:%d] reg_a\n", disp);
    } else {
      not_yet_impl("gen_expr", __LINE__);
    }
  } else if (expr->kind == NODE_LIST) {
    _gen_expr_binary(fn_arg_names, lvar_names, expr);
  } else {
    not_yet_impl("gen_expr", __LINE__);
  }
}

void _gen_funcall(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* funcall
) {
  char* fn_name;
  NodeList* fn_args;
  char[256] vm_comment;
  NodeItem* fn_arg;
  int i;

  fn_name = NodeList_head(funcall)->str_val;
  fn_args = NodeList_rest(funcall);

  for (i = NodeList_len(fn_args) - 1; i >= 0; i--) {
    fn_arg = fn_args->items[i];
    gen_expr(fn_arg_names, lvar_names, fn_arg);
    printf("  push reg_a\n");
  }

  sprintf(vm_comment, "call  %s", fn_name);
  gen_vm_comment(vm_comment);
  printf("  call %s\n", fn_name);

  printf("  add_sp %d\n", NodeList_len(fn_args));
}

void gen_call(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  NodeList* funcall;

  funcall = NodeList_rest(stmt);
  _gen_funcall(fn_arg_names, lvar_names, funcall);
}

void gen_call_set(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  char[64] lvar_name;
  NodeList* funcall;
  int disp;
  
  strcpy(lvar_name, NodeList_get(stmt, 1)->str_val);
  funcall = NodeList_get(stmt, 2)->list ;

  _gen_funcall(fn_arg_names, lvar_names, funcall);

  disp = to_lvar_disp(lvar_names, lvar_name);
  printf("  cp reg_a [bp:%d]\n", disp);
}

int is_number(char* str) {
  int len = strlen(str);
  int i;

  for (i = 0; i < len; i++) {
    if ( '0' <= (int)str[i] && (int)str[i] <= '9' ) {
      ;
    } else {
      return 0;
    }
  }

  return 1;
}

void _gen_set(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeItem* dest,
  NodeItem* expr
) {
  char[64] dest_str;
  int disp;

  // puts_fn("-->> _gen_set");

  gen_expr(fn_arg_names, lvar_names, expr);

  strcpy(dest_str, dest->str_val);

  if (Names_contains(lvar_names, dest_str)) {
    disp = to_lvar_disp(lvar_names, dest_str);
    printf("  cp reg_a [bp:%d]\n", disp);

  } else {
    not_yet_impl("gen_set", __LINE__);
  }
}

void gen_set(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  NodeItem* dest = stmt->items[1];
  NodeItem* expr = stmt->items[2];

  puts_fn("-->> gen_set");

  _gen_set(fn_arg_names, lvar_names, dest, expr);
}

void gen_return(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  NodeItem* expr = NodeList_get(stmt, 1);

  gen_expr(fn_arg_names, lvar_names, expr);
}

void gen_while(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  NodeItem* cond_expr;
  NodeList* body;
  int label_id;

  puts_fn("-->> gen_while");

  cond_expr = NodeList_get(stmt, 1);
  body = NodeList_get(stmt, 2)->list;

  label_id = get_label_id();

  printf("\n");

  printf("label while_%d\n", label_id);

  gen_expr(fn_arg_names, lvar_names, cond_expr);
  printf("  cp 0 reg_b\n");
  printf("  compare\n");

  printf("  jump_eq end_while_%d\n", label_id);

  gen_stmts(fn_arg_names, lvar_names, body);

  printf("  jump while_%d\n", label_id);

  printf("label end_while_%d\n", label_id);
  printf("\n");
}

void gen_case(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  int label_id;
  int when_idx = -1;
  NodeList* when_clause;
  NodeItem* cond;
  NodeList* rest;
  char[512] cond_json;
  int i;
  NodeList* when_clauses;

  when_clauses = NodeList_rest(stmt);

  label_id = get_label_id();

  printf("\n");
  printf("  # -->> case_%d\n", label_id);

  for (i = 0; i < NodeList_len(when_clauses); i++) {
    when_clause = NodeList_get(when_clauses, i)->list;
    when_idx++;

    cond = NodeList_head(when_clause);
    rest = NodeList_rest(when_clause);

    to_json_line(cond_json, cond);
    printf("  # when_%d_%d: %s\n",
           label_id, when_idx, cond_json
           );

    printf("  # -->> expr\n");
    gen_expr(fn_arg_names, lvar_names, cond);
    printf("  # <<-- expr\n");
    printf("  cp 0 reg_b\n");

    printf("  compare\n");
    printf("  jump_eq end_when_%d_%d\n", label_id, when_idx);

    gen_stmts(fn_arg_names, lvar_names, rest);      

    printf("  jump end_case_%d\n", label_id);

    // 偽の場合ここにジャンプ
    printf("label end_when_%d_%d\n", label_id, when_idx);
  }

  printf("label end_case_%d\n", label_id);
  printf("  # <<-- case_%d\n", label_id);
  printf("\n");
}

void gen_vm_comment(
  char* comment
) {
  char[256] temp;
  int i;
  for (i = 0; i < strlen(comment); i++) {
    if (char_eq(comment[i], ' ')) {
      temp[i] = '~';
    } else {
      temp[i] = comment[i];
    }
  }
  temp[i] = '\0';
  printf("  _cmt %s\n", temp);
}

void gen_debug(void) {
  printf("  _debug\n");
}

void gen_stmt(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  char* head = NodeList_head(stmt)->str_val;

  if (str_eq(head, "set")) {
    gen_set(fn_arg_names, lvar_names, stmt);
  } else if (str_eq(head, "call")) {
    gen_call(fn_arg_names, lvar_names, stmt);
  } else if (str_eq(head, "call_set")) {
    gen_call_set(fn_arg_names, lvar_names, stmt);
  } else if (str_eq(head, "return")) {
    gen_return(fn_arg_names, lvar_names, stmt);
  } else if (str_eq(head, "while")) {
    gen_while(fn_arg_names, lvar_names, stmt);
  } else if (str_eq(head, "case")) {
    gen_case(fn_arg_names, lvar_names, stmt);
  } else if (str_eq(head, "_cmt")) {
    gen_vm_comment(NodeList_get(stmt, 1)->str_val);
  } else if (str_eq(head, "_debug")) {
    gen_debug();
  } else {
    not_yet_impl("gen_stmt", __LINE__);
  }
}

void gen_stmts(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmts
) {
  NodeList* stmt;
  int i;

  puts_fn("-->> gen_stmts");

  for (i = 0; i < NodeList_len(stmts); i++) {
    stmt = stmts->items[i]->list;
    gen_stmt(fn_arg_names, lvar_names, stmt);
  }
}

void gen_var(
  Names* fn_arg_names,
  Names* lvar_names,
  NodeList* stmt
) {
  printf("  sub_sp 1\n");

  if (NodeList_len(stmt) == 3) {
    _gen_set(
      fn_arg_names,
      lvar_names,
      stmt->items[1],
      stmt->items[2]
    );
  }
}

void gen_func_def(NodeList* func_def) {
  char* fn_name;
  Names* fn_arg_names;
  NodeList* body;
  Names* lvar_names;
  NodeList* stmt;
  NodeItem* var_name;
  int i;

  puts_fn("-->> gen_func_def");

  fn_name = func_def->items[1]->str_val;
  fn_arg_names = Names_from_node_list(func_def->items[2]->list);
  body = func_def->items[3]->list;

  printf("\n");
  printf("label %s\n", fn_name);
  asm_prologue();

  printf("\n");
  printf("  # 関数の処理本体\n");

  lvar_names = Names_new();

  for (i = 0; i < NodeList_len(body); i++) {
    stmt = body->items[i]->list;

    if (
      str_eq(
        NodeList_head(stmt)->str_val,
        "var"
      )
    ) {
      var_name = NodeList_get(stmt, 1);
      Names_add(lvar_names, var_name->str_val);
      gen_var(fn_arg_names, lvar_names, stmt);
    } else {
      gen_stmt(fn_arg_names, lvar_names, stmt);
    }
  }

  printf("\n");
  asm_epilogue();
  printf("  ret\n");
}

void gen_top_stmts(NodeList* list) {
  NodeItem* item;
  char* head;
  NodeList* top_stmt;
  int i;

  for (i = 0; i < NodeList_len(list); i++) {
    item = list->items[i];
    top_stmt = item->list;

    head = NodeList_head(item->list)->str_val;

    if (str_eq(head, "func")) {
      gen_func_def(top_stmt);
    } else {
      not_yet_impl("gen_top_stmts", __LINE__);
    }
  }
}

void gen_builtin_set_vram(void) {
  printf("\n");
  printf("label set_vram\n");
  asm_prologue();

  printf("  set_vram [bp:2] [bp:3]\n"); // vram_addr value

  asm_epilogue();
  printf("  ret\n");
}

void gen_builtin_get_vram(void) {
  printf("\n");
  printf("label get_vram\n");
  asm_prologue();

  printf("  get_vram [bp:2] reg_a\n"); // vram_addr dest

  asm_epilogue();
  printf("  ret\n");
}

int main(void) {
  char[INPUT_SIZE] input;
  NodeList* tree;
  NodeList* top_stmts;

  read_stdin_all(input);

  tree = parse_json(input);

  printf("  call main\n");
  printf("  exit\n");

  top_stmts = NodeList_rest(tree);
  gen_top_stmts(top_stmts);

  printf("#>builtins");
  gen_builtin_set_vram();
  gen_builtin_get_vram();
  printf("#<builtins");

  return 0;
}
